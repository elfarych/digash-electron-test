[OVERLAY name=NotificationsStory, ctx=Canvas, author = Digash, version=1.0.4]

prop('color', {  type: 'color', def: '#08c65e' })
prop('size', {  type: 'number', def: 7 })
prop('showLabels', {  type: 'boolean', def: true })
prop('markerOutline', {  type: 'boolean', def: true })
prop('outlineWidth', {  type: 'number', def: 4 })

function draw(ctx) {
    ctx.lineWidth = $props.outlineWidth
    const layout = $core.layout
    const data = $core.data
    const view = $core.view

  ctx.fillStyle = $props.color
    ctx.beginPath()
    let lbls1 = iterTrades(ctx, view, data, layout, -1)
    ctx.fill()

    // Fill buy trades
    ctx.fillStyle = $props.color
    ctx.beginPath()
    let lbls2 = iterTrades(ctx, view, data, layout, 1)
    ctx.fill()

    // Draw labels
    if ($props.showLabels) {
        ctx.fillStyle = $props.color
        ctx.font = $core.props.config.FONT
        let all = [...lbls1, ...lbls2]
        drawLabels(ctx, view, layout, all)
    }

}

// Iter through arcs
function iterTrades(ctx, view, data, layout, dir) {
    let lables = []
    for (var i = view.i1, n = view.i2; i <= n; i++) {
        let p = data[i]
        let ohlc = layout.ohlc(p[0])
        if (!ohlc) continue
        let x = layout.ti2x(p[0], i)
        if (dir > 0) {
            var y = layout.value2y(ohlc[1])
        } else {
            var y = layout.value2y(ohlc[2])
        }
        for (var k = 1; k < p.length; k++) {
            if (Math.sign(p[k][0]) === dir) continue
            let size = $props.size
            if (p[k][2]) size *= 1.5
            let yk = y - dir * (15 * (k - 1) + 10)
            let align = dir < 0 ? 'right' : 'left'
            let dy = p[k][2] ? - dir * 1 : 0
            if (p[k][1]) {
                lables.push([ x + 10 * dir, yk + dy, p[k][1], align])
            }
            drawArrow(ctx, x, yk, -dir, size)
        }
    }
    return lables
}

function drawArrow(ctx, x, y, dir, size) {
    ctx.moveTo(x, y)
    ctx.lineTo(x + size * dir * 0.63, y + size * dir)
    ctx.lineTo(x - size * dir * 0.63, y + size * dir)
}

// Draw simple lables
function drawLabels(ctx, view, layout, lables) {
    for (var l of lables) {
        ctx.textAlign = l[3]
        let dy = l[3] === 'right' ? 7 : 0
        ctx.fillText(l[2], l[0], l[1] + dy)
    }
}

// Not affecting the y-range
function yRange() {
  return null
}

// Legend formatter, Array of [value, color] pairs
// x represents one data item e.g. [<time>, <value>]
function legend(x) {
    return ''
}
