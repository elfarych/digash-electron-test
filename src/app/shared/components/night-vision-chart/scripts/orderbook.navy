// Navy ~ 0.1-lite
// ^^^ First comment should provide a NavyJS version

// Meta tag
[OVERLAY name = Orderbook, ctx = Canvas, author = digash, version = 1.0.0]

prop('colorScaleAsks', {type: 'string', def: (value) => gradient(value, 'asks')});
prop('colorScaleBids', {type: 'string', def: (value) => gradient(value, 'bids')});
prop('test', {type: 'string', def: 'zzz'});

let hoveredLimitOrder = {x: 0, y: 0};
let cellHeightStep = 0;
let hoveredYAskValue;
let hoveredYBidValue;
let hoveredTimestamp;
let offsetX = 0;
let cellHeight = 1;
let heatmapImageData;

let prevPosA = 0;
let prevPosB = 0;
let prevRangeStart = 0;
let prevRangeEnd = 0;
let prevHigh = 0;
let prevXStep = 0;
let prevWidth = 0;
let redrawCount = 0;

function draw(ctx) {
  const data = $core.data;
  const view = $core.view;
  const layout = $core.layout;

  const redraw = window.redraw;
  const positionChanged = prevPosA !== $core.layout.A ||
    prevPosB !== $core.layout.B ||
    prevRangeStart !== $core.range[0] ||
    prevRangeEnd !== $core.range[1] ||
    prevXStep !== $core.layout.pxStep ||
    prevWidth !== $core.layout.width;
  // const positionChanged = prevPosA !== $core.layout.A || prevPosB !== $core.layout.B || prevXStep !== $core.layout.pxStep;
  // const positionChanged = prevPosA !== $core.layout.A || prevXStep !== $core.layout.pxStep;

  handleHoveredLimitOrders(ctx);

  if (heatmapImageData && !redraw && !positionChanged && redrawCount > 7) {
    putImageData(ctx);
    drawHoveredLimitOrders(ctx);
    return void 0;
  }

  prevPosA = $core.layout.A;
  prevPosB = $core.layout.B;
  prevRangeStart = $core.range[0];
  prevRangeEnd = $core.range[1];
  prevHigh = $core.layout.$hi;
  prevXStep = $core.layout.pxStep;
  prevWidth = $core.layout.width;

  drawDetailedHeatmap(ctx);
  getHeatmapImage(ctx);
  window.redraw = false;
  redrawCount += 1;
}

function putImageData(ctx) {
  const prevPosX = $core.layout.time2x(prevRangeStart);
  const crntPosX = $core.layout.time2x($core.range[0]);
  const diffPosX = prevPosX - crntPosX;

  const prevPosY = $core.layout.value2y(prevHigh);
  const crntPosY = $core.layout.value2y($core.layout.$hi);
  const diffPosY = prevPosY - crntPosY;

  ctx.putImageData(heatmapImageData, diffPosX, diffPosY);
}

function getHeatmapImage(ctx) {
  const layout = $core.layout;
  heatmapImageData = ctx.getImageData(0, 0, layout.width * 4, layout.height * 4);
}

function drawHoveredLimitOrders(ctx) {
  const data = $core.data;
  const view = $core.view;
  const layout = $core.layout;
  const cellWidth = layout.pxStep;
  const y1 = $core.layout.value2y(0);
  const y2 = $core.layout.value2y($core.layout.$step);
  const yStepRange = y1 - y2;
  const yOffset = $core.layout.$step * Math.pow(10, $core.layout.prec);
  let cellHeight = yStepRange / yOffset;
  if (cellHeight < 2) {
    cellHeight = 2;
  }

  let xColumnsToHighlight = [];
  if (hoveredTimestamp) {
    xColumnsToHighlight = getRowsToHighlight(hoveredTimestamp, view, data);
  }

  const hoveredYValue = hoveredYAskValue ?? hoveredYBidValue;

  if (!hoveredYValue) {
    return void 0;
  }

  for (const timestamp of xColumnsToHighlight) {
    ctx.strokeRect(layout.time2x(timestamp) - (cellWidth / 2), layout.value2y(hoveredYValue), cellWidth, cellHeight);
    ctx.strokeStyle = document.body.classList.contains('light-theme') ? 'black' : 'white';
  }
}

function handleHoveredLimitOrders(ctx) {
  const data = $core.data;
  const layout = $core.layout;
  const y1 = $core.layout.value2y(0);
  const y2 = $core.layout.value2y($core.layout.$step);
  const yStepRange = y1 - y2;
  const yOffset = $core.layout.$step * Math.pow(10, $core.layout.prec);
  let cellHeight = yStepRange / yOffset;
  if (cellHeight < 2) {
    cellHeight = 2;
  }

  if (hoveredLimitOrder) {
    cellHeightStep = $core.layout.y2value(0) - $core.layout.y2value(cellHeight);
    const hoveredColumn = data.find(([timestamp,]) => timestamp === hoveredLimitOrder.x);
    hoveredTimestamp = hoveredColumn ? hoveredColumn[0] : 0;
    const yHoveredData = hoveredColumn ? hoveredColumn[1] : undefined;

    if (hoveredTimestamp && yHoveredData) {
      hoveredYAskValue = yHoveredData.a.find((value) => inRange(value, parseFloat(hoveredLimitOrder.y)));
      hoveredYBidValue = yHoveredData.b.find((value) => inRange(value, parseFloat(hoveredLimitOrder.y)));
    }
  }
}

function drawDetailedHeatmap(ctx) {
  const layout = $core.layout;
  const data = $core.data;
  const view = $core.view;

  const cellWidth = layout.pxStep;

  const lo = layout.$lo;
  const hi = layout.$hi;
  const step = layout.$step;

  const y1 = layout.value2y(0);
  const y2 = layout.value2y(step);
  const yStepRange = y1 - y2;
  const yOffset = step * Math.pow(10, layout.prec);
  let cellHeight = yStepRange / yOffset;
  cellHeight = Math.max(cellHeight, 2); // Ensure cellHeight is at least 2

  for (let i = view.i1 + 1, n = view.i2; i <= n; i++) {
    const timestamp = data[i][0];
    const x = layout.time2x(timestamp);
    let currentPrice = 0;

    try {
      currentPrice = $core.hub.mainOv.data[i - 1][4] ?? 0;
    } catch (e) {
      // Handle exceptions if necessary
    }

    const asks = data[i][1].a;
    const bids = data[i][1].b;

    for (let j = 0; j < asks.length; j += 2) {
      const price = asks[j];

      if (price > hi) {
        continue;
      }

      // if (currentPrice && price < currentPrice) {
      //   continue;
      // }

      const quantity = asks[j + 1];
      const y = layout.value2y(price);

      ctx.beginPath(); // Begin path for each rectangle
      ctx.fillStyle = $props.colorScaleAsks(price * quantity);
      // ctx.fillStyle = window.colorScaleAsks ? window.colorScaleAsks(price * quantity) : gradient(price * quantity, 'asks');
      ctx.rect(x - (cellWidth / 2), y, cellWidth, cellHeight);
      ctx.fill(); // Fill the rectangle immediately
    }

    for (let j = 0; j < bids.length; j += 2) {
      const price = bids[j];

      if (price < lo) {
        continue;
      }

      // if (currentPrice && price > currentPrice) {
      //   continue;
      // }

      const quantity = bids[j + 1];
      const y = layout.value2y(price);

      ctx.beginPath(); // Begin path for each rectangle
      ctx.fillStyle = $props.colorScaleBids(price * quantity);
      // ctx.fillStyle = window.colorScaleBids ? window.colorScaleBids(price * quantity) : gradient(price * quantity, 'bids');
      ctx.rect(x - (cellWidth / 2), y, cellWidth, cellHeight);
      ctx.fill(); // Fill the rectangle immediately
    }
  }
}

function mousemove(event) {
  const x = $core.cursor.time;
  const precision = Math.pow(10, $core.layout.prec);
  const roundedY = (Math.ceil($core.layout.y2value(event.layerY) * precision) / precision);
  const y = roundedY.toFixed($core.layout.prec);
  hoveredLimitOrder = {x, y};
}

function mouseout() {
  hoveredLimitOrder = {x: 0, y: 0};
  hoveredYAskValue = undefined;
  hoveredYBidValue = undefined;
  hoveredTimestamp = undefined;
}

function click(event) {
  if ($core.meta.selectedTool) {
    return void 0;
  }

  if (event.target) {
    event.target.dispatchEvent(new CustomEvent("limit-order-clicked", {
      detail: {
        hoveredYAskValue,
        hoveredYBidValue,
        hoveredTimestamp,
        x: event.layerX - 200,
        y: event.layerY
      },
      bubbles: true
    }));
  }
}

// Make a gradient depending on the y-value
function gradient(val, type) {
  const min_value = 50_000;
  const max_value = 1_000_000;
  const startOpacity = 1;

  const opacity = val / max_value;

  if (type === 'asks') {
    return 'rgba(255,0,0,' + opacity + ')';
  }

  if (type === 'bids') {
    return 'rgba(30,150,0,' + opacity + ')';
  }
}

function getRowsToHighlight(hoveredTimestamp, view, data) {
  let xColumnsToHighlight = [];
  const idx = data.findIndex((value) => value[0] === hoveredTimestamp);
  for (let i = idx, n = view.i2; i <= n; i++) {
    const timestamp = data[i][0];

    if (limitOrderExists(data[i])) {
      xColumnsToHighlight.push(timestamp);
    } else {
      break;
    }
  }

  for (let i = idx, n = view.i1; i > n; i--) {
    const timestamp = data[i][0];
    if (limitOrderExists(data[i])) {
      xColumnsToHighlight.push(timestamp)
    } else {
      break;
    }
  }

  return xColumnsToHighlight;
}

function limitOrderExists(data) {
  let exists = false;
  for (let j = 0; j <= data[1].a.length; j += 2) {
    let price = data[1].a[j];
    if (inRange(price, parseFloat(hoveredLimitOrder.y))) {
      exists = true;
      break;
    }
  }

  for (let j = 0; j <= data[1].b.length; j += 2) {
    let price = data[1].b[j];
    if (inRange(price, parseFloat(hoveredLimitOrder.y))) {
      exists = true;
      break;
    }
  }

  return exists;
}

function inRange(price, value) {
  return price + 0 >= value && price - cellHeightStep <= value
}

function legend(x) {
  return [];
}
