// Navy ~ 0.2-lite

// <ds>Bands indicator, e.g. BollingerBands</ds>
// format: [<timestamp>, <high>, <mid>, <low>]

[OVERLAY name=Band, ctx=Canvas, verion=1.0.0]

// Overlay props
prop('color', { type: 'Color', def: '#b41d70' })
prop('backColor', { type: 'Color', def: $props.color + '11' })
prop('lineWidth', { type: 'number', def: 1 })
prop('showMid', { type: 'boolean', def: true })

// Draw call
draw(ctx) {
  // Background
  const data = $core.data
  const view = $core.view
  const layout = $core.layout
  ctx.beginPath()
  ctx.fillStyle = $props.backColor
  for (var i = view.i1, n = view.i2; i <= n; i++) {
    let p = data[i]
    let x = layout.ti2x(p[0], i)
    let y = layout.value2y(p[1] || undefined)
    ctx.lineTo(x, y)
  }
  for (var i = view.i2, i1 = view.i1; i >= i1; i--) {
    let p = data[i]
    let x = layout.ti2x(p[0], i)
    let y = layout.value2y(p[3] || undefined)
    ctx.lineTo(x, y)
  }
  ctx.fill()
  // Lines
  // TODO: can be faster by combining line
  // into one path with moveTo in b/w
  ctx.lineWidth = $props.lineWidth
  ctx.strokeStyle = $props.color
  // Top line
  ctx.beginPath()
  for (var i = view.i1, n = view.i2; i <= n; i++) {
    let p = data[i]
    let x = layout.ti2x(p[0], i)
    let y = layout.value2y(p[1] || undefined)
    ctx.lineTo(x, y)
  }
  ctx.stroke()
  // Bottom line
  ctx.beginPath()
  for (var i = view.i1, n = view.i2; i <= n; i++) {
    let p = data[i]
    let x = layout.ti2x(p[0], i)
    let y = layout.value2y(p[3] || undefined)
    ctx.lineTo(x, y)
  }
  ctx.stroke()
  // Middle line
  if (!$props.showMid) return
  ctx.beginPath()
  for (var i = 0; i < data.length; i++) {
    let p = data[i]
    let x = layout.ti2x(p[0], i)
    let y = layout.value2y(p[2] || undefined)
    ctx.lineTo(x, y)
  }
  ctx.stroke()
}

let initialLow = 0;
let initialHigh = 0;
yRange() {
  const updData = $core.hub.mainOv.data.slice(-500);
  let len = updData.length;

  var h, l, high = -Infinity, low = Infinity
  if (initialLow && initialHigh) {
    low = initialLow;
    high = initialHigh;
  } else {
    for(var i = 0; i < len; i++) {
      let point = updData[i];
      if (!point) {
        break;
      }
      if (point[2] > high) high = point[2];
      if (point[3] < low) low = point[3];
    }
    initialLow = low;
    initialHigh = high;
  }
  return [high, low]
}

// Legend, defined as pairs [value, color]
legend(x) => $props.showMid ? [
  [x[1], $props.color],
  [x[2], $props.color],
  [x[3], $props.color]
] : [
  [x[1], $props.color],
  [x[3], $props.color]
]
