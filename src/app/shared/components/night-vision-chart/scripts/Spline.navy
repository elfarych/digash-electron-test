
// NavyJS ~ 0.2-lite

// <ds>Single spline</ds>
// Format: [<timestamp>, <number>]

[OVERLAY name=Spline, ctx=Canvas, version=1.1.0]

// Define new props
prop('color', { type: 'color', def: '#31ce31' })
prop('lineWidth', { type: 'number', def: 1 })
prop('dataIndex', { type: 'integer', def: 1 })


draw(ctx) {
  ctx.lineWidth = $props.lineWidth
  ctx.lineJoin = "round"
  ctx.strokeStyle = $props.color
  ctx.beginPath()
  const layout = $core.layout
  const data = $core.data // Full dataset
  const view = $core.view // Visible view
  const idx = $props.dataIndex
  for (var i = view.i1, n = view.i2; i <= n; i++) {
    let p = data[i]
    let x = layout.ti2x(p[0], i)
    let y = layout.value2y(p[idx])
    ctx.lineTo(x, y)
  }
  ctx.stroke()
}

// Price label + Scale symbol + price line
/*valueTracker(x) => {
    show: true,
    symbol: $core.src.name,
    line: true,
    color: $props.color,
    value: x[$props.dataIndex]
}*/

preSampler(x) => [x[$props.dataIndex]]

// Map data item to OHLC (for candle magnets etc.)
// Here we simulate a candle with 0 height
ohlc(x) => Array(4).fill(x[$props.dataIndex])

yRange(data) {
    let di = $props.dataIndex
    let len = data.length
    var h, l, high = -Infinity, low = Infinity
    for(var i = 0; i < len; i++) {
        let point = data[i][di]
        if (point > high) high = point
        if (point < low) low = point
    }
    return [high, low]
}

// Legend, defined as pairs [value, color]
legend(x) => [[x[$props.dataIndex], $props.color]]
