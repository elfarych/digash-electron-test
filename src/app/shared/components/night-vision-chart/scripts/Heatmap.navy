// NavyJS ~ 0.2-lite

// <ds>Heatmap</ds>, format:
// [<timestamp>, <open>, <high>, <low>, <close>, <?volume>]


[OVERLAY name = Heatmap2, ctx = Canvas, version = 1.0.0]

prop('colorScaleAsks', {type: 'string', def: (value) => gradient(value, 'asks')(value)});
prop('colorScaleBids', {type: 'string', def: (value) => gradient(value, 'bids')(value)});
prop('showLabels', {type: 'boolean', def: true});

// let redraw = false;
let hoveredLimitOrder = {x: 0, y: 0};
let hoveredYAskValue;
let hoveredYBidValue;
let hoveredTimestamp;
let cellHeightStep = 0;
let fullLimitOrder = true;
let redrawCount = 0;
let drawnElements = 0;
let redrawInProgress = false;

init()
{
  // redraw = true;
}

draw(ctx)
{
  if (!$core.meta.heatmap) {
    return void 0;
  }

  if (window?.[$core.props.id]?.redraw) {
    drawHeatmap();
  } else {
    handleHoveredLimitOrders(ctx);
    drawHoveredLimitOrders(ctx);
  }

  if (window?.[$core.props.id]?.drawMore) {
    drawMore();
  }

  if (window?.[$core.props.id]?.redrawLast) {
    redrawLast();
  }

  if (window?.[$core.props.id]?.redrawNew) {
    redrawNew();
  }

  if ($core.view.length <= 30 && $props.showLabels) {
    drawLabel(ctx);
  }
}

function redrawNew() {
  if (!$core.meta.heatmap) {
    return void 0;
  }

  $core.meta.scrollLock = true;
  window[$core.props.id].redrawNew = false;

  let obj = new PIXI.Graphics();

  const data = $core.data;
  const layout = $core.layout;

  const step = layout.$step;

  const y1 = layout.value2y(0, false);
  const y2 = layout.value2y(step, false);
  const yStepRange = y1 - y2;
  const yOffset = step * Math.pow(10, layout.prec);
  let cellHeight = yStepRange / yOffset / $core.meta.heatmap.heatmapApp.stage.scale.y;
  cellHeight = Math.max(cellHeight, 1); // Ensure cellHeight is at least 0.5

  const lastElementData = data[data.length - 1];

  const lastStageChild = $core.meta.heatmap.heatmapApp.stage.children[$core.meta.heatmap.heatmapApp.stage.children.length - 1];

  if (!lastStageChild || !lastStageChild.geometry.graphicsData[0]) {
    return void 0;
  }

  const cellWidth = lastStageChild.geometry.graphicsData[0].shape.width;
  const xPos = lastStageChild.geometry.graphicsData[0].shape.x + cellWidth;

  const asks = lastElementData[1].a;
  const bids = lastElementData[1].b;

  for (let j = 0; j < asks.length; j += 2) {
    const price = asks[j];
    const quantity = asks[j + 1];
    const y = (layout.value2y(price, false) - $core.meta.heatmap.heatmapApp.stage.position.y) / $core.meta.heatmap.heatmapApp.stage.scale.y;
    obj.beginFill($props.colorScaleAsks(price * quantity));
    obj.drawRect(xPos, y, cellWidth, cellHeight);
  }

  for (let j = 0; j < bids.length; j += 2) {
    const price = bids[j];
    const quantity = bids[j + 1];
    const y = (layout.value2y(price, false) - $core.meta.heatmap.heatmapApp.stage.position.y) / $core.meta.heatmap.heatmapApp.stage.scale.y;
    obj.beginFill($props.colorScaleBids(price * quantity));
    obj.drawRect(xPos, y, cellWidth, cellHeight);
  }

  drawnElements = data.length;
  $core.meta.heatmap.heatmapApp.stage.addChild(obj);
  $core.meta.scrollLock = false;
}

function redrawLast() {
  if (!$core.meta.heatmap) {
    return void 0;
  }

  window[$core.props.id].redrawLast = false;

  const data = $core.data;
  const layout = $core.layout;


  const step = layout.$step;

  const y1 = layout.value2y(0, false);
  const y2 = layout.value2y(step, false);
  const yStepRange = y1 - y2;
  const yOffset = step * Math.pow(10, layout.prec);
  let cellHeight = yStepRange / yOffset / $core.meta.heatmap.heatmapApp.stage.scale.y;
  cellHeight = Math.max(cellHeight, 1); // Ensure cellHeight is at least 0.5

  const lastElementData = data[data.length - 1];
  const lastStageChild = $core.meta.heatmap.heatmapApp.stage.children[$core.meta.heatmap.heatmapApp.stage.children.length - 1];

  if (!lastStageChild || !lastStageChild.geometry.graphicsData[0]) {
    return void 0;
  }

  const xPos = lastStageChild.geometry.graphicsData[0].shape.x;
  const cellWidth = lastStageChild.geometry.graphicsData[0].shape.width;
  lastStageChild.clear();
  lastStageChild.destroy();
  $core.meta.heatmap.heatmapApp.stage.removeChild(lastStageChild);

  const asks = lastElementData[1].a;
  const bids = lastElementData[1].b;

  let obj = new PIXI.Graphics();

  for (let j = 0; j < asks.length; j += 2) {
    const price = asks[j];
    const quantity = asks[j + 1];
    const y = (layout.value2y(price, false) - $core.meta.heatmap.heatmapApp.stage.position.y) / $core.meta.heatmap.heatmapApp.stage.scale.y;
    obj.beginFill($props.colorScaleAsks(price * quantity));
    obj.drawRect(xPos, y, cellWidth, cellHeight);
  }

  for (let j = 0; j < bids.length; j += 2) {
    const price = bids[j];
    const quantity = bids[j + 1];
    const y = (layout.value2y(price, false) - $core.meta.heatmap.heatmapApp.stage.position.y) / $core.meta.heatmap.heatmapApp.stage.scale.y;
    obj.beginFill($props.colorScaleBids(price * quantity));
    obj.drawRect(xPos, y, cellWidth, cellHeight);
  }

  $core.meta.heatmap.heatmapApp.stage.addChild(obj);
}

function drawMore() {
  if (redrawInProgress) {
    return void 0;
  }

  if (!$core.meta.heatmap) {
    return void 0;
  }

  redrawInProgress = true;
  $core.meta.scrollLock = true;
  window[$core.props.id].drawMore = false;

  const data = $core.data;
  const layout = $core.layout;

  const step = layout.$step;

  const y1 = layout.value2y(0, false);
  const y2 = layout.value2y(step, false);
  const yStepRange = y1 - y2;
  const yOffset = step * Math.pow(10, layout.prec);
  let cellHeight = yStepRange / yOffset / $core.meta.heatmap.heatmapApp.stage.scale.y;
  cellHeight = Math.max(cellHeight, 1); // Ensure cellHeight is at least 0.5

  const startIdx = data.length - $core.meta.heatmap.heatmapApp.stage.children.length;

  const stageChild = $core.meta.heatmap.heatmapApp.stage.children[0];

  if (!stageChild || !stageChild.geometry.graphicsData[0]) {
    return void 0;
  }

  const cellWidth = stageChild.geometry.graphicsData[0].shape.width;

  let xOffset = stageChild.geometry.graphicsData[0].shape.x
    - (layout.ti2xWithoutRound(data[startIdx][0]) - $core.meta.heatmap.heatmapApp.stage.position.x) / $core.meta.heatmap.heatmapApp.stage.scale.x;

  xOffset = xOffset + cellWidth / 2;

  for (let i = 0, n = startIdx - 1; i <= n; i++) {
    let obj = new PIXI.Graphics();

    const timestamp = data[i][0];
    const x = (layout.ti2xWithoutRound(timestamp) - $core.meta.heatmap.heatmapApp.stage.position.x) / $core.meta.heatmap.heatmapApp.stage.scale.x;
    let currentPrice = 0;

    try {
      currentPrice = $core.hub.mainOv.data[i - 1][4] ?? 0;
    } catch (e) {
      // Handle exceptions if necessary
    }

    const asks = data[i][1].a;
    const bids = data[i][1].b;

    for (let j = 0; j < asks.length; j += 2) {
      const price = asks[j];
      const quantity = asks[j + 1];
      const y = (layout.value2y(price, false) - $core.meta.heatmap.heatmapApp.stage.position.y) / $core.meta.heatmap.heatmapApp.stage.scale.y;
      obj.beginFill($props.colorScaleAsks(price * quantity));
      obj.drawRect(x + xOffset - (cellWidth / 2), y, cellWidth, cellHeight);
    }

    for (let j = 0; j < bids.length; j += 2) {
      const price = bids[j];
      const quantity = bids[j + 1];
      const y = (layout.value2y(price, false) - $core.meta.heatmap.heatmapApp.stage.position.y) / $core.meta.heatmap.heatmapApp.stage.scale.y;
      obj.beginFill($props.colorScaleBids(price * quantity));
      obj.drawRect(x + xOffset - (cellWidth / 2), y, cellWidth, cellHeight);
    }

    $core.meta.heatmap.heatmapApp.stage.addChildAt(obj, i);
  }

  $core.meta.scrollLock = false;
  redrawInProgress = false;
}

function drawHeatmap() {
  if (!$core.meta.heatmap) {
    return void 0;
  }

  $core.meta.scrollLock = true;
  window[$core.props.id].redraw = false;

  let stageChildWidth = undefined;
  let stageChildHeight = undefined;

  for (const child of $core.meta.heatmap.heatmapApp.stage.children) {
    child.clear();
    child.destroy();
    $core.meta.heatmap.heatmapApp.stage.removeChild(child);
  }

  $core.meta.heatmap.heatmapApp.stage.removeChildren();

  const data = $core.data;
  const view = $core.view;
  const layout = $core.layout;

  let cnv = $lib.layoutCnv($core, true, $props.showVolume)
  let bodies = [...cnv.upBodies ?? [], ...cnv.dwBodies ?? []]
  if (!bodies.length) return;
  let cellWidth2 = Math.max(bodies[0].w, 1) / $core.meta.heatmap.heatmapApp.stage.scale.x;
  let cellWidth = layout.pxStep / $core.meta.heatmap.heatmapApp.stage.scale.x;

  const step = layout.$step;

  const y1 = layout.value2y(0, false);
  const y2 = layout.value2y(step, false);
  const yStepRange = y1 - y2;
  const yOffset = step * Math.pow(10, layout.prec);

  let cellHeight = yStepRange / yOffset / $core.meta.heatmap.heatmapApp.stage.scale.y;
  cellHeight = Math.max(cellHeight, 1); // Ensure cellHeight is at least 0.5

  for (let i = 0, n = data.length - 1; i <= n; i++) {
    let obj = new PIXI.Graphics();

    const timestamp = data[i][0];
    let x = (layout.ti2xWithoutRound(timestamp) - $core.meta.heatmap.heatmapApp.stage.position.x) / $core.meta.heatmap.heatmapApp.stage.scale.x;
    let currentPrice = 0;

    // try {
    //   currentPrice = $core.hub.mainOv.data[i - 1][4] ?? 0;
    // } catch (e) {
    //   // Handle exceptions if necessary
    // }

    const asks = data[i][1].a;
    const bids = data[i][1].b;

    if (fullLimitOrder) {
      for (let j = 0; j < asks.length; j += 2) {
        const price = asks[j];
        const quantity = asks[j + 1];

        if (currentPrice && price < currentPrice) {
          continue;
        }

        const y = (layout.value2y(price, false) - $core.meta.heatmap.heatmapApp.stage.position.y) / $core.meta.heatmap.heatmapApp.stage.scale.y;
        obj.beginFill($props.colorScaleAsks(price * quantity));
        obj.drawRect(x - (cellWidth / ($core.view.length > 50 ? 2.5 : 2)), y, cellWidth, cellHeight);
      }

      for (let j = 0; j < bids.length; j += 2) {
        const price = bids[j];
        const quantity = bids[j + 1];

        // if (currentPrice && price > currentPrice) {
        //   continue;
        // }

        const y = (layout.value2y(price, false) - $core.meta.heatmap.heatmapApp.stage.position.y) / $core.meta.heatmap.heatmapApp.stage.scale.y;
        obj.beginFill($props.colorScaleBids(price * quantity));
        obj.drawRect(x - (cellWidth / ($core.view.length > 50 ? 2.5 : 2)), y, cellWidth, cellHeight);
      }
    }

    $core.meta.heatmap.heatmapApp.stage.addChild(obj);
  }

  drawnElements = data.length;
  (window.redraw) = false;
  redrawCount++;
  $core.meta.scrollLock = false;
}

function drawLabel(ctx) {
  ctx.font = '9px Quantico';
  ctx.fillStyle = window.theme === 'dark' ? 'rgba(255, 255, 255, .75)' : 'rgba(0, 0, 0, .75)';
  ctx.textAlign = 'center';
  ctx.textBaseline = 'middle';

  const data = $core.data;
  const view = $core.view;
  const layout = $core.layout;
  const hi = layout.$hi;

  ctx.beginPath();

  let showLimitOrdersFilter = 100_000;

  if ($core.hub.mainOv.name?.includes('BTC')) {
    showLimitOrdersFilter = 1_000_000;
  }

  if ($core.hub.mainOv.name?.includes('ETH')) {
    showLimitOrdersFilter = 1_000_000;
  }

  if ($core.hub.mainOv.name?.includes('XRP') || $core.hub.mainOv.name?.includes('BNB')) {
    showLimitOrdersFilter = 500_000;
  }

  for (let i = view.i1, n = view.i2; i <= n; i++) {
    const timestamp = data[i][0];
    let x = layout.ti2xWithoutRound(timestamp);

    const asks = data[i][1].a;
    const bids = data[i][1].b;

    for (let j = 0; j < asks.length; j += 2) {
      const price = asks[j];

      if (price > hi) {
        continue;
      }

      const quantity = asks[j + 1];
      const y = layout.value2y(price, false);
      if (price * quantity > showLimitOrdersFilter) {
        const value = convertPrice(price * quantity);
        ctx.fillText(value, x, y - 5);
      }
    }

    for (let j = 0; j < bids.length; j += 2) {
      const price = bids[j];

      if (price > hi) {
        continue;
      }

      const quantity = bids[j + 1];
      const y = layout.value2y(price, false);
      if (price * quantity > showLimitOrdersFilter) {
        const value = convertPrice(price * quantity);
        ctx.fillText(value, x, y - 5);
      }
    }
  }

  ctx.closePath();
}

function handleHoveredLimitOrders(ctx) {
  const data = $core.data;
  const layout = $core.layout;

  const stageChild = $core.meta.heatmap.heatmapApp.stage.children[0];

  if (!stageChild) {
    return void 0;
  }

  let cellHeight = 2;

  if (!stageChild.geometry.graphicsData[0]) {
    const step = layout.$step;
    const y1 = layout.value2y(0, false);
    const y2 = layout.value2y(step, false);
    const yStepRange = y1 - y2;
    const yOffset = step * Math.pow(10, layout.prec);
    cellHeight = yStepRange / yOffset / $core.meta.heatmap.heatmapApp.stage.scale.y;
  } else {
    cellHeight = stageChild.geometry.graphicsData[0].shape.height * $core.meta.heatmap.heatmapApp.stage.scale.y;
  }

  cellHeight = Math.max(cellHeight, 2); // Ensure cellHeight is at least 0.5

  if (hoveredLimitOrder) {
    cellHeightStep = $core.layout.y2value(0) - $core.layout.y2value(cellHeight);
    const hoveredColumn = data.find(([timestamp,]) => timestamp === hoveredLimitOrder.x);
    hoveredTimestamp = hoveredColumn ? hoveredColumn[0] : 0;
    const yHoveredData = hoveredColumn ? hoveredColumn[1] : undefined;

    if (hoveredTimestamp && yHoveredData) {
      hoveredYAskValue = yHoveredData.a.find((value) => inRange(value, parseFloat(hoveredLimitOrder.y)));
      hoveredYBidValue = yHoveredData.b.find((value) => inRange(value, parseFloat(hoveredLimitOrder.y)));
    }
  }
}

function drawHoveredLimitOrders(ctx) {
  const data = $core.data;
  const view = $core.view;
  const layout = $core.layout;
  const cellWidth = layout.pxStep;

  const stageChild = $core.meta.heatmap.heatmapApp.stage.children[0];

  if (!stageChild) {
    return void 0;
  }

  let cellHeight = 2;

  if (!stageChild.geometry.graphicsData[0]) {
    const step = layout.$step;
    const y1 = layout.value2y(0, false);
    const y2 = layout.value2y(step, false);
    const yStepRange = y1 - y2;
    const yOffset = step * Math.pow(10, layout.prec);
    cellHeight = yStepRange / yOffset / $core.meta.heatmap.heatmapApp.stage.scale.y;
  } else {
    cellHeight = stageChild.geometry.graphicsData[0].shape.height * $core.meta.heatmap.heatmapApp.stage.scale.y;
  }

  cellHeight = Math.max(cellHeight, 1); // Ensure cellHeight is at least 0.5

  let xColumnsToHighlight = [];
  if (hoveredTimestamp) {
    xColumnsToHighlight = getRowsToHighlight(hoveredTimestamp, view, data);
  }

  const hoveredYValue = hoveredYAskValue ?? hoveredYBidValue;

  if (!hoveredYValue) {
    return void 0;
  }

  for (const timestamp of xColumnsToHighlight) {
    ctx.strokeRect(layout.ti2xWithoutRound(timestamp) - (cellWidth / 2), layout.value2y(hoveredYValue), cellWidth, cellHeight);
    ctx.strokeStyle = document.body.classList.contains('light-theme') ? 'black' : 'white';
  }
}

function getRowsToHighlight(hoveredTimestamp, view, data) {
  let xColumnsToHighlight = [];
  const idx = data.findIndex((value) => value[0] === hoveredTimestamp);

  let askLimitOrder = false;
  for (let j = 0; j <= data[idx][1].a.length; j += 2) {
    let price = data[idx][1].a[j];
    if (inRange(price, parseFloat(hoveredLimitOrder.y))) {
      askLimitOrder = true;
      break;
    }
  }

  for (let i = idx, n = view.i2; i <= n; i++) {
    const timestamp = data[i][0];

    if (limitOrderExists(data[i], askLimitOrder)) {
      xColumnsToHighlight.push(timestamp);
    } else {
      break;
    }
  }

  for (let i = idx, n = view.i1; i > n; i--) {
    const timestamp = data[i][0];
    if (limitOrderExists(data[i], askLimitOrder)) {
      xColumnsToHighlight.push(timestamp)
    } else {
      break;
    }
  }

  return xColumnsToHighlight;
}

function limitOrderExists(data, askLimitOrder) {
  let exists = false;

  if (askLimitOrder) {
    for (let j = 0; j <= data[1].a.length; j += 2) {
      let price = data[1].a[j];
      if (inRange(price, parseFloat(hoveredLimitOrder.y))) {
        exists = true;
        break;
      }
    }
  } else {
    for (let j = 0; j <= data[1].b.length; j += 2) {
      let price = data[1].b[j];
      if (inRange(price, parseFloat(hoveredLimitOrder.y))) {
        exists = true;
        break;
      }
    }
  }

  return exists;
}

function inRange(price, value) {
  return price + 0 >= value && price - cellHeightStep <= value
}

function convertPrice(price) {
  if (!price) {
    return void 0;
  }

  const formatter = Intl.NumberFormat('en', {notation: 'compact'});
  return `${formatter.format(price)}$`;
}

function click(event) {
  if ($core.meta.tool !== 'Cursor') {
    return void 0;
  }

  if (event.target) {
    event.target.dispatchEvent(new CustomEvent("limit-order-clicked", {
      detail: {
        hoveredYAskValue,
        hoveredYBidValue,
        hoveredTimestamp,
        x: event.offsetX - 200,
        y: event.offsetY
      },
      bubbles: true
    }))
  }
}

function mousemove(event) {
  const x = $core.cursor.time;
  const precision = Math.pow(10, $core.layout.prec);
  const roundedY = (Math.ceil($core.layout.y2value(event.offsetY) * precision) / precision);
  const y = roundedY.toFixed($core.layout.prec);
  hoveredLimitOrder = {x, y};
}

function mouseout() {
  hoveredLimitOrder = {x: 0, y: 0};
  hoveredYAskValue = undefined;
  hoveredYBidValue = undefined;
  hoveredTimestamp = undefined;
}

function gradient(val, type) {
  const min_value = 10_000;
  const max_value = 500_000;
  const startOpacity = 1;
  const opacityMin = 0.1;
  const opacityMax = 1;

  const opacity = Math.max(val / max_value, 0.2);

  if (type === 'asks') {
    return d3.scaleLinear()
      .range([`rgba(255,0,0, ${opacityMin})`, `rgba(255,242,0, ${(opacityMin + opacityMax) / 2})`, `rgba(30,150,0,${opacityMax})`])
      .domain([5_000, max_value]);
  }

  if (type === 'bids') {
    return d3.scaleLinear()
      .range([`rgba(30,150,0,${opacityMin})`, `rgba(255,242,0,${(opacityMin + opacityMax) / 2})`, `rgba(255,0,0, ${opacityMax})`])
      .domain([5_000, max_value]);
  }
}


legend()
=>
[]
